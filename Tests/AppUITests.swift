//
// --------------------------------------------------------------------------
// AppUITests.swift
// Created for Mac Mouse Fix (https://github.com/noah-nuebling/mac-mouse-fix)
// Created by Noah Nuebling in 2024
// Licensed under Licensed under the MMF License (https://github.com/noah-nuebling/mac-mouse-fix/blob/master/License)
// --------------------------------------------------------------------------
//

import XCTest

final class AppUITests: XCTestCase {
    
    ///
    /// Lifecycle
    ///
    
    override func setUpWithError() throws {
        /// Put setup code here. This method is called before the invocation of each test method in the class.
        
        /// In UI tests it is usually best to stop immediately when a failure occurs.
        continueAfterFailure = false
    }

    override func tearDownWithError() throws {
        /// Put teardown code here. This method is called after the invocation of each test method in the class.
    }

    /// 
    /// Screenshots
    ///
    
    var app: XCUIApplication? = nil
    func testTakeLocalizationScreenshots() throws {
        
        /// Launch the app
        app = XCUIApplication()
        app!.launch()
        
        /// Find enable toggle
        let switcherino = app?.switches["enableToggle"]
        let switcherinoExists = switcherino?.waitForExistence(timeout: 10) ?? false
        XCTAssertTrue(switcherinoExists)
        
        /// Enable MMF (if necessary)
        let isEnabledPredicate = NSPredicate.init(format: "value == 1")
        if (isEnabledPredicate.evaluate(with: switcherino) == false) {
            switcherino?.click()
            let switchIsEnabled = expectation(for: isEnabledPredicate, evaluatedWith: switcherino)
            XCTWaiter().wait(for: [switchIsEnabled], timeout: 10.0)
        }
        
        /// Capture MainTab
        takeLocalizationScreenshot()
    }
    

    func takeLocalizationScreenshot() {
        
        let screenshot = app!.windows.firstMatch.screenshot()
        let screenshotAttachment = XCTAttachment(screenshot: screenshot, quality: .medium) /// .medium turns this into a .jpeg which matches autogenerated loc screenshots on iOS project.
        screenshotAttachment.name = "Localization screenshot" /// Autogenerated loc screenshots on my iOS projects have this name it seems.
        screenshotAttachment.lifetime = .keepAlways 
        add(screenshotAttachment)
        
        guard let app = app else {
            assert(false)
            return;
        }
        
        XCTContext.runActivity(named: "print app dict") { activity in
            

            
            
            do {
                NSString(stringLiteral: "ab").
                
                let dict = try app.snapshot().dictionaryRepresentation
                let tree = TreeNode<NSDictionary>.tree(with: dict, childrenKey: "children")
                print("\(tree)")
            } catch {
                
            }
        }
        
//        for text in app.staticTexts.allElementsBoundByAccessibilityElement {
//        
//            
//            let axTitle = text.title
//            let axValue = text.value
//            let axPlaceholder = text.placeholderValue
//            let tooltip = ""
//            var axHelp = [String]()
//            for helpTag in text.helpTags.allElementsBoundByAccessibilityElement {
//                axHelp.append(helpTag.debugDescription)
//            }
//            let axLabel = text.label
//            
//            let axDescription = text.description
//            let axValueDescription = ""
//            let axRoleDescription = ""
//            let axHorizontalUnitDescription = ""
//            let axVerticalUnitDescription = ""
//            let axMarkerTypeDescription = ""
//            let axUnitDescription = ""
//            
//            var dict: Dictionary<XCUIElement.AttributeName, Any> = [:]
//            do {
//                dict = try text.snapshot().dictionaryRepresentation
//            } catch {
//                NSLog("Error getting snapshot dict: \(error)")
//            }
//            
//            XCTContext.runActivity(named: "printUIString") { activity in
//                
//                let printString = "The label is \([axTitle, axValue, axPlaceholder, tooltip, axHelp, axLabel, axDescription, axValueDescription, axRoleDescription, axHorizontalUnitDescription, axVerticalUnitDescription, axMarkerTypeDescription, axUnitDescription])\ndict:\n\(dict)"
//        
//                print(printString)
//                
//            }
//        }

    }
    
}
