
#
# Imports
#

import argparse
import os
import glob
from collections import defaultdict
import json

import mflocales
import mfutils


#
# Constants
#

#
# Main
#
def main():
    
    # Parse args
    parser = argparse.ArgumentParser()
    parser.add_argument('--target_repo', required=True, help='This arg should be automatically provided by run.py and point to the mmf-website-repo')
    parser.add_argument('--output_path', required=True, help='This is the relative path from the mmf-website-repo to output file')
    args = parser.parse_args()
    target_repo = args.target_repo
    output_subpath = args.output_path
    
    # Compile args
    output_path = os.path.join(target_repo, output_subpath)
    
    # Log
    print(f'compile_website_strings: Invoked with args: {args}')
    
    # Validate
    output_path_ext = os.path.splitext(output_path)[1]
    assert output_path_ext == '.js', f'Path extension of output path should be ".js". Is "{output_path_ext}".'
    
    # Find .xcstrings file in mmf-website-repo
    xcstrings_paths = glob.glob(os.path.join(target_repo, '**/*.xcstrings'))
    assert(len(xcstrings_paths) == 1)
    xcstrings_path = xcstrings_paths[0]
    
    # Load xcstrings file
    xcstrings = None
    with open(xcstrings_path, 'r') as file:
        xcstrings = json.load(file)
    
    # Log
    print(f'compile_website_strings: Loaded .xcstrings file at {xcstrings_path}')
    
    # Find mmf-project locales
    source_locale, translation_locales = mflocales.find_mmf_project_locales()
    locales = [source_locale] + translation_locales
    
    # Log
    print(f'compile_website_strings: Found source_locale: {source_locale}, translation_locales: {translation_locales}')
    
    # Sort 
    #   We sort the locales - this way that vue will display the languages in a nice order
    locales = mflocales.sorted_locales(locales, source_locale)
    
    # Compile
    vuestrings = {}
    vuelangs = []
    for locale in locales:
        
        # Compile new strings dict
        #   that @nuxtjs/i18n can understand
        vuestrings[locale] = {}
        for key in xcstrings['strings']:
            value, locale_of_value = mflocales.get_translation(xcstrings, key, locale, fall_back_to_next_best_language=False)
            assert locale_of_value == locale
            if value != None and len(value) > 0:
                vuestrings[locale][key] = value

        # Compile list-of-languages dict
        #   (These are nuxt i18n `LocaleObject`s)
        vuelangs.append({
            'code': locale,
            'name': mflocales.language_tag_to_language_name(locale, locale, include_flag=True),
        })
    
    # Render the dict to a .js file
    #   We could also render it to json, but json doesn't allow comments, which we want to add.
    vuestrings_json = json.dumps(vuestrings, indent=4)
    vuelangs_json = json.dumps(vuelangs, indent=4)
    js_string = f"""\
//
// AUTOGENERATED - DO NOT EDIT
// This file is automatically generated and should not be edited manually. 
// It was converted from an .xcstrings file, by the CompileWebsiteStrings script (which is from the mac-mouse-fix repo).
//
export default {{
    "sourceLocale": "{source_locale}",
    "locales": {vuelangs_json},
    "strings":
{mfutils.add_indent(vuestrings_json, 4)}
    
}};
"""
    
    # Log
    print(f'compile_website_strings: Compiled strings dict for nuxtjs i18n')

    # Write to output_path
    with open(output_path, 'w') as file:
        file.write(js_string)
    
    # Log
    print(f'compile_website_strings: Wrote strings dict to {output_path}')
    
#
# Call main
#
if __name__ == '__main__':
    main()